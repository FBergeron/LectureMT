#!/usr/bin/env python

import sys
sys.path.append('.')

import datetime
import queue
import threading
import time

if len(sys.argv) < 4:
    print("Usage: translate-batch-messages host username password [loglevel]")
    print("Example: translate-batch-messages lotus.kuee.kyoto-u.ac.jp/~frederic/LectureMT/api/1.0 fred xxxxxx DEBUG")
    exit(1)

server = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
log_level = sys.argv[4] if len(sys.argv) == 5 else "INFO"

# This can be adjusted in function of the number of available workers and 
# whether the server is using GPU or CPU.
worker_count = 10

import logging
logging.basicConfig(filename="translate_batch_message.log", filemode='w', level=log_level)

from lecturemt.httpclient import LectureMT_Http_Client

class Worker(threading.Thread):

    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name


    def run(self):
        client = LectureMT_Http_Client(server, username, password)
        while True:
            next_item  = text_to_translate_queue.get(True)

            if next_item is None:
                print("next_item is None for {0}".format(self.name))
                break

            (i, text_to_translate)  = next_item
            resp_post = client.post_translation("ja", "en", text_to_translate)
            while True:
                time.sleep(0.2)
                translation = client.get_translation(resp_post['id'])
                if 'status' in translation and translation['status'] == 'PROCESSED':
                    process_time = datetime.datetime.strptime(translation['date_processed'], "%Y-%m-%d %H:%M:%S.%f") - \
                        datetime.datetime.strptime(translation['date_submission'], "%Y-%m-%d %H:%M:%S.%f")
                    try:
                        mutex.acquire()
                        translations.append((i, text_to_translate, translation['text_target'], process_time))
                    finally:
                        mutex.release()
                    client.delete_translation(resp_post['id'])
                    text_to_translate_queue.task_done()
                    break


text_to_translate_queue = queue.Queue()
translations = []
mutex = threading.Lock()

workers = []
for w in range(0, worker_count):
    worker = Worker("worker-{0}".format(w))
    workers.append(worker)
    worker.start()

i = 0
for line in sys.stdin:
    text_to_translate = line.strip()

    if text_to_translate == "":
        continue

    logging.debug("line={0}: {1}".format(i, text_to_translate))
    text_to_translate = line.strip()
    text_to_translate_queue.put((i, text_to_translate))
    i += 1

print("all lines have been read.")

# Wait for all the lines to be translated.
text_to_translate_queue.join()

# Stop the workers.
for p in range(0, worker_count):
    text_to_translate_queue.put(None)

translations.sort(key=lambda tuple:tuple[0])

print("Producing report...")
for trans in translations:
    print("{0}".format(trans))
